#include <iostream>
#include <list>
#include <fstream>
#include <sstream>
#include <vector>
#include <algorithm>
#include <unordered_map>

using namespace std;

string read(string& code, string& name, list<tuple<string, string, string>>& cache) {
    for (auto n : cache) {
        if (get<0>(n) == name && get<1>(n) == code) {
            return get<2>(n);
        }
    }
    string filename = "world_cities.csv";
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Error: Could not open file " << filename << endl;
        return "";
    }
    string line, item;
    while (getline(file, line)) {
        stringstream ss(line);
        vector<string> items;
        while (getline(ss, item, ',')) {
            items.push_back(item);
        }
        if (items[0] == code && items[1] == name) {
            file.close();
            return items[2];
        }
    }
    file.close();
    return "";
}

int main() {
    list<tuple<string, string, string>> cache;
    unordered_map<string, int> frequency;
    string cacheType;
    string finished;

    cout << "Enter number for caching strategy ([1]FIFO, [2]LFU, [3]Random): ";
    getline(cin, cacheType);

    while (finished != "n") {
        cout << "Enter city name: ";
        string name;
        getline(cin, name);
        cout << "Enter country code: ";
        string code;
        getline(cin, code);
        string population = read(code, name, cache);

        if (!population.empty()) {
            auto line = tuple(code, name, population);
            if (cacheType == "2") {
                if (frequency.contains(get<1>(line))) {
                    frequency[get<1>(line)] += 1;
                } else {
                    frequency[get<1>(line)] = 1;
                }
            }
            if (find(cache.begin(), cache.end(), line) == cache.end()) {
                cache.push_front(tuple(code, name, population));
            }
            cout << "population: " << population;
        } else {
            cout << "City not found";
        }

        if (cache.size() > 5) {
            if (cacheType == "1") {
                cache.pop_back();
            } else if (cacheType == "2") {
                int min = frequency.begin()->second;
                string minName = frequency.begin()->first;
                for (auto n : frequency) {
                    if (n.second <= min) {
                        minName = n.first;
                    }
                }
                cache.remove_if([&](const tuple<string, string, string>& t) {return get<1>(t) == minName;});
                frequency.erase(minName);
            } else {
                int randomNum = (rand() % 10);
                int num = 0;
                string remove;
                for (auto n : cache) {
                    if (num == randomNum) {
                        remove = get<1>(n);
                    }
                    num++;
                }
                cache.remove_if([&](const tuple<string, string, string>& t) {return get<1>(t) == remove;});
            }
        }

        cout << endl << "Do you want to continue? (y/n) ";
        getline(cin, finished);
        
    }
    return 0;
}
